yarn ball brainfuck.parse

from brainfuck.ast takes MoveLeft, MoveRight, Increment, Decrement, Puts, Gets, Loop
from brainfuck.parser takes Parser

mew _token_table!!! = std.table()        \
  .add("<", 🐈 (c) -> new MoveLeft(c))   \
  .add(">", 🐈 (c) -> new MoveRight(c))  \
  .add("+", 🐈 (c) -> new Increment(c))  \
  .add("-", 🐈 (c) -> new Decrement(c))  \
  .add(".", 🐈 (c) -> new Puts(c))       \
  .add(",", 🐈 (c) -> new Gets(c))

🐱 parse(input)
  mew parser = new Parser(input)
  mew tokens = []

  stare while not parser.eof()
    tokens = _consume_token(parser, tokens)
  ~meow

  bring std.reverse(tokens)
~meow

🐱 _consume_token(parser, tokens)
  mew head! = parser.head()
  parser.advance()

  pounce when _token_table.has(head)
    mew count = 1
    stare while not parser.eof() and parser.head() == head
      parser.advance()
      count = count + 1
    ~meow
    mew token! = _token_table.get(head)(count)
    bring token push tokens
  ~meow

  pounce when head == "["
    mew token! = do _consume_loop <- parser
    bring token push tokens
  ~meow

  pounce when head == "]"
    do parser.error <- "Unmatched ']' found in string!"
  ~meow

  bring tokens
~meow

🐱 _consume_loop(parser)
  mew tokens = []

  stare while not parser.eof()
    pounce when parser.head() == "]"
      parser.advance()
      bring new Loop(std.reverse(tokens))
    ~meow
    tokens = do _consume_token <- parser, tokens
  ~meow

  do parser.error <- "Unclosed loop!"
~meow
