yarn ball main

takes std.graphic
takes mewly
takes palette
takes utils.canvas
takes utils.position
from controls takes Controls
from animation.player takes AnimationPlayer
from utils.fps takes FpsCounter

~( ^.x.^)> A clowder representing our game and all of its state. <(^.x.^ )~
clowder GameLoop
  🐱 wake()
    -- Animation:
    home.animation = new AnimationPlayer(mewly.frames, mewly.frame_rate)

    -- Text:
    home.title = 📦 [
      text: "set animation speed",
      options: 📦 [ size: 12, color: palette.crepe ],
    ]

    -- Controls:
    home.controls = new Controls(6)

    -- Frame counter (for conveniency):
    home.fps = 📦 [
      state: new FpsCounter(),
      options: 📦 [ color: palette.cream ]
    ]
  ~meow

  🐱 change_speed(percentage)
    mew new_frame_rate! = std.floor(mewly.frame_rate * (percentage / 100))
    home.animation.set_frame_rate(new_frame_rate)
  ~meow

  🐱 loop()
    do graphic.paint <- palette.lilac

    -- Animation:
    mew animation_pos! = position.center(mewly.width, mewly.height)
    do home.animation.draw <- animation_pos.x, animation_pos.y

    -- Text:
    mew text_size! = graphic.measure_text(home.title.text, home.title.options)
    mew text_x! = (canvas.width - text_size.width) / 2
    mew text_y! = position.row(1)
    do graphic.write <- home.title.text, text_x, text_y, home.title.options

    -- Controls:
    home.controls.draw()
    home.controls.update()
    do home.change_speed <- home.controls.get_speed()

    -- FPS:
    home.fps.state.tick()
    do home.fps.state.draw <- 1, 0, home.fps.options
  ~meow
~meow

~( ^.x.^)> And with that, we can draw our game loop! <(^.x.^ )~
mew game! = new GameLoop()
do graphic.init_ <- game.loop
