yarn ball controls

takes std.graphic
takes palette
takes utils.position
takes utils.canvas
from std.graphic takes spritesheet, Rectangle
from ui.button takes Button
from ui.text takes TextBox

~( ^.x.^)>
The speed controls will consist of:
  - A 'plus' button for increasing speed.
  - A 'minus' button for decreasing speed.
  - A text box to display the current speed.

To start off, let's define constants for our sprites:
<(^.x.^ )~
mew sprite_width!  = 16
mew sprite_height! = 16

mew plus! = 📦 [
  normal:  "plus-sprite",
  hovered: "plus-sprite-hovered",
]

mew minus! = 📦 [
  normal:  "minus-sprite",
  hovered: "minus-sprite-hovered",
]

~( ^.x.^)> And let us load our sprites: <(^.x.^ )~
spritesheet("assets/plus-minus.png", [
  📦 [ key: plus.normal,    rect: new Rectangle( 0,  0,  16, 16) ],
  📦 [ key: plus.hovered,   rect: new Rectangle(16,  0,  16, 16) ],
  📦 [ key: minus.normal,   rect: new Rectangle( 0, 16,  16, 16) ],
  📦 [ key: minus.hovered,  rect: new Rectangle(16, 16,  16, 16) ],
])

~( ^.x.^)>
After that, we can begin working on our controls' state.

We will store our speed in percentages:
  100% is the normal speed.
  50% is half as fast.
  200% is twice as fast.

We don't want our speed to ever go below 1%.

Let's define a clowder to represent our controls.
The controls will always be horizontally centered.

We will also manage the speed value in the same clowder.
<(^.x.^ )~

clowder Controls
  🐱 wake(row)
    home.speed = 100

    mew text_width = 48
    mew controls_width = sprite_width * 2 + text_width

    mew x = (canvas.width - controls_width) / 2
    mew y = position.row(row)

    home.minus = new Button(
      new Rectangle(x, y, sprite_width, sprite_height),
      🐈 () -> home.set_speed(-20),
    )
    x = x + sprite_width

    home.display = new TextBox(
      new Rectangle(x, y, text_width, sprite_height),
      std.purr(:3"[home.get_speed()]%"),
      📦 [ size: 16, color: palette.crepe ]
    )
    x = x + text_width

    home.plus = new Button(
      new Rectangle(x, y, sprite_width, sprite_height),
      🐈 () -> home.set_speed(20),
    )
  ~meow

  🐱 get_speed()
    bring home.speed
  ~meow

  🐱 set_speed(value)
    home.speed = std.max(20, home.speed + value)
  ~meow

  🐱 draw()
    mew plus_sprite  = plus.hovered   \
      if home.plus.is_hovered()       \
      else plus.normal

    mew minus_sprite = minus.hovered  \
      if home.minus.is_hovered()      \
      else minus.normal

    do graphic.draw <- plus_sprite, home.plus.rect.x, home.plus.rect.y 
    do graphic.draw <- minus_sprite, home.minus.rect.x, home.minus.rect.y
    home.display.draw()
  ~meow

  🐱 update()
    home.plus.update()
    home.minus.update()
    do home.display.set_message <- :3"[home.get_speed()]%"
  ~meow
~meow
